# -*- coding: utf-8 -*-
# autogenerated module by ic package
# fmt: off
# pylint: skip-file

import numpy as np
from scipy.special import spence

def li2(x):
    return spence(1-x)

def f2_splus_reg(pc):
    return (8*(-2*(pc.m1sq + pc.m2sq)*pc.s1hat**2 - 2*(pc.delta**2 - 6*pc.m1sq*pc.Q2)*(pc.m2sq + pc.s1hat) - (2*pc.delta**4*(2*pc.m2sq + pc.s1hat))/pc.s1hat**2 - 9*pc.m2sq*pc.sigma_pm**2 + 2*pc.s1hat*(2*pc.delta**2 + (pc.m1sq - 5*pc.m2sq)*pc.sigma_pm) - (2*pc.delta**2*(pc.delta**2 + 2*(2*pc.m2sq + pc.s1hat)*pc.sigma_pm))/pc.s1hat - pc.delta**2*(pc.m2sq - 2*pc.sigma_pp) + ((pc.deltap**2 - 6*pc.Q2*(pc.m2sq + pc.s1hat))*pc.sigma_pp*(pc.s1hat + pc.sigma_pp))/(2.*(pc.m2sq + pc.s1hat)))*pc.x)/(pc.deltap**2*pc.Q2) - (8*pc.L_xi*(pc.m2sq + pc.s1hat)*(2*pc.delta**4*(pc.s1hat + pc.sigma_pp) + 2*pc.delta**2*pc.s1hat*(pc.s1hat + 2*pc.sigma_pm)*(pc.s1hat + pc.sigma_pp) + pc.s1hat**2*(pc.deltap**2*pc.sigma_pp - 6*pc.m1sq*pc.Q2*(2*pc.s1hat + 3*pc.sigma_pp)))*pc.x)/(pc.deltap**3*pc.Q2*pc.s1hat**2)

def f2_splus_soft(pc):
    return (-2*(2*pc.delta + pc.L_xisoft*pc.sigma_pp)*pc.x)/pc.Q2

def f2_splus_virt(pc):
    return (pc.delta*(2*pc.CRm + pc.C1p*pc.m1sq + pc.C1m*pc.m2sq)*pc.x)/(2.*pc.Q2)

def f2_sminus_reg(pc):
    return (16*pc.L_xi*np.sqrt(pc.m1sq * pc.m2sq)*(pc.deltap**2 - 6*pc.m1sq*pc.Q2)*(pc.m2sq + pc.s1hat)*pc.x)/(pc.deltap**3*pc.Q2) + (16*np.sqrt(pc.m1sq * pc.m2sq)*(2*pc.deltap**2 - 3*pc.Q2*(pc.s1hat + pc.sigma_pp) - (pc.deltap**2*(pc.s1hat + pc.sigma_pp))/(2.*(pc.m2sq + pc.s1hat)))*pc.x)/(pc.deltap**2*pc.Q2)

def f2_sminus_soft(pc):
    return 0

def f2_sminus_virt(pc):
    return (pc.delta*(pc.Cplus + ((pc.C1m + pc.C1p)*np.sqrt(pc.m1sq * pc.m2sq))/2.)*pc.x)/pc.Q2

def I1(pc):
    return np.log( ( pc.sigma_pp + pc.delta ) / ( pc.sigma_pp - pc.delta ) ) / pc.delta

def CRm(pc):
    return ( pc.delta**2 / 2 / pc.Q2 + pc.sigma_pp * ( 1 + np.log( pc.Q2 / pc.delta ) ) ) * pc.I1 + ( pc.m2sq - pc.m1sq ) / 2 / pc.Q2 * np.log( pc.m1sq / pc.m2sq ) - np.log( pc.Q2 / pc.m1sq ) - np.log( pc.Q2 / pc.m2sq ) - 4 + pc.sigma_pp / pc.delta * ( + np.log( np.abs( ( pc.delta - pc.sigma_pm ) / 2 / pc.Q2 ) )**2 / 2 + np.log( np.abs( ( pc.delta - pc.sigma_mp ) / 2 / pc.Q2 ) )**2 / 2 - np.log( np.abs( ( pc.delta + pc.sigma_pm ) / 2 / pc.Q2 ) )**2 / 2 - np.log( np.abs( ( pc.delta + pc.sigma_mp ) / 2 / pc.Q2 ) )**2 / 2 - li2( ( pc.delta - pc.sigma_pm ) / 2 / pc.delta ) - li2( ( pc.delta - pc.sigma_mp ) / 2 / pc.delta ) + li2( ( pc.delta + pc.sigma_pm ) / 2 / pc.delta ) + li2( ( pc.delta + pc.sigma_mp ) / 2 / pc.delta ) )

def Cplus(pc):
    return 2 * np.sqrt(pc.m1sq * pc.m2sq) * pc.I1

def C1m(pc):
    return - ( pc.sigma_pm * pc.I1 + np.log( pc.m1sq / pc.m2sq ) ) / pc.Q2

def C1p(pc):
    return - ( pc.sigma_mp * pc.I1 - np.log( pc.m1sq / pc.m2sq ) ) / pc.Q2

def S(pc):
    return 2 + pc.sigma_pp / pc.delta * ( pc.delta * pc.I1 + li2( 2 * pc.delta / ( pc.delta - pc.sigma_pp ) ) - li2( 2 * pc.delta / ( pc.delta + pc.sigma_pp ) ) ) + np.log( pc.delta**2 / pc.m2sq / pc.Q2 ) * ( - 2 + pc.sigma_pp * pc.I1 )
