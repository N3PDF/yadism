# -*- coding: utf-8 -*-
import pathlib
import inspect
import re

from ic import mma, manipulate, data

here = pathlib.Path(__file__).parent

output_path = here / "ic.py"


def exprs():
    """Runs Mathematica and obtains all expressions"""
    r = mma.MmaRunner()
    # define raw variables
    for j in [1, 2, 3]:
        manipulate.init_kind_vars(
            r,
            j,
            data.__getattribute__(f"f{j}hat"),  # pylint: disable=no-member
            data.__getattribute__(f"M{j}"),  # pylint: disable=no-member
            data.__getattribute__(f"N{j}"),  # pylint: disable=no-member
            data.__getattribute__(f"V{j}"),  # pylint: disable=no-member
        )
    # prepare FL
    manipulate.join_fl(r)
    # compute elements
    exprs = {
        "f2_splus_reg": manipulate.parse_reg(r, 2, "Splus"),
        "f2_splus_soft": manipulate.parse_soft(r, 2, "Splus"),
        "f2_splus_virt": manipulate.parse_virt(r, 2, "Splus"),
        "f2_sminus_reg": manipulate.parse_reg(r, 2, "Sminus"),
        "f2_sminus_soft": manipulate.parse_soft(r, 2, "Sminus"),
        "f2_sminus_virt": manipulate.parse_virt(r, 2, "Sminus"),
    }
    r.close()
    return exprs


def file_content(exprs):
    """
    Prepares all expressions to be written to a Python module.

    Paramters
    ---------
        exprs : dict
            mapping name -> expression (as str)

    Returns
    -------
        cnt : str
            Python module content
    """
    # Header: skip black+pylint
    cnt = """
    # -*- coding: utf-8 -*-
    # autogenerated module by ic package
    # fmt: off
    # pylint: skip-file
    """
    # write all elements
    for k, ex in exprs.items():
        ex = manipulate.post_process(ex)
        cnt += f"""
    def {k}(pc):
        return {ex}
        
        """
    # do some cleanup
    cnt = inspect.cleandoc(cnt)
    cnt = re.sub("\n\\s+\n", "\n\n", cnt)
    cnt = cnt.strip() + "\n"
    return cnt


def run():
    """Writes the autogenerated module."""
    # get
    e = exprs()
    # parse
    cnt = file_content(e)
    # write
    print(f"writing to {output_path}")
    with open(output_path, "w") as o:
        o.write(cnt)


if __name__ == "__main__":
    run()
